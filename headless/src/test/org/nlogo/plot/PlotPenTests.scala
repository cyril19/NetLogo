// (C) Uri Wilensky. https://github.com/NetLogo/NetLogo

package org.nlogo.plot

import org.nlogo.api.PlotPenInterface

class PlotPenTests extends SimplePlotTest {

  test("PlotModeConstants") {
    assert(PlotPenInterface.isValidPlotPenMode(PlotPenInterface.LineMode))
    assert(PlotPenInterface.isValidPlotPenMode(PlotPenInterface.BarMode))
    assert(PlotPenInterface.isValidPlotPenMode(PlotPenInterface.PointMode))
    assert(!PlotPenInterface.isValidPlotPenMode(-1))
    assert(!PlotPenInterface.isValidPlotPenMode(3))
  }
  testPlot("Constructor") { plot =>
    val pen0 = plot.createPlotPen("test", true)
    assert(pen0.temporary)
    val pen = plot.createPlotPen("test", false)
    expect("test")(pen.name)
    assert(!pen.temporary)
    expect(java.awt.Color.BLACK.getRGB)(pen.state.color)
    assert(pen.state.isDown)
    expect(0.0)(pen.state.x)
    expect(PlotPenInterface.LineMode)(pen.state.mode)
    expect(1.0)(pen.state.interval)
    expect(0)(pen.points.size)
    assert(pen.inLegend)
  }
  testPlot("ResetOfPermanentPen") { plot =>
    val pen = plot.createPlotPen("test", false)
    expect(0.0)(pen.state.x)
    pen.plot(100)
    pen.plot(200)
    expect(1.0)(pen.state.x)
    pen.state = pen.state.copy(isDown = false)
    assert(!pen.state.isDown)
    pen.plot(12.3)
    expect(3)(pen.points.size)
    pen.state = pen.state.copy(
      color = java.awt.Color.GREEN.getRGB,
      mode = PlotPenInterface.BarMode)
    pen.softReset()
    assert(pen.state.isDown)
    expect(0.0)(pen.state.x)
    expect(0)(pen.points.size)
    expect(java.awt.Color.GREEN.getRGB)(pen.state.color)
    expect(PlotPenInterface.BarMode)(pen.state.mode)
    pen.hardReset()
    expect(java.awt.Color.BLACK.getRGB)(pen.state.color)
    expect(PlotPenInterface.LineMode)(pen.state.mode)
  }
  testPlot("ResetOfTemporaryPen") { plot =>
    val pen = plot.createPlotPen("test", true)
    expect(0.0)(pen.state.x)
    pen.plot(100)
    pen.plot(200)
    expect(1.0)(pen.state.x)
    pen.state = pen.state.copy(isDown = false)
    assert(!pen.state.isDown)
    pen.plot(12.3)
    expect(3)(pen.points.size)
    pen.state = pen.state.copy(
      color = java.awt.Color.GREEN.getRGB,
      mode = PlotPenInterface.BarMode)
    pen.softReset()
    assert(pen.state.isDown)
    expect(0.0)(pen.state.x)
    expect(0)(pen.points.size)
    expect(java.awt.Color.GREEN.getRGB)(pen.state.color)
    expect(PlotPenInterface.BarMode)(pen.state.mode)
    pen.hardReset()
    expect(java.awt.Color.GREEN.getRGB)(pen.state.color)
    expect(PlotPenInterface.BarMode)(pen.state.mode)
  }
  testPlot("PlotOfOneArg") { plot =>
    val pen = plot.createPlotPen("test", true)
    pen.state = pen.state.copy(interval = 1.5)
    pen.plot(5.0)
    expect(0.0)(pen.state.x)
    pen.plot(7.5)
    pen.state = pen.state.copy(interval = 2.5)
    pen.plot(9.0)
    expect(3)(pen.points.size)
    expect(0.0)(pen.points(0).x)
    expect(1.5)(pen.points(1).x)
    expect(4.0)(pen.points(2).x)
    expect(5.0)(pen.points(0).y)
    expect(7.5)(pen.points(1).y)
    expect(9.0)(pen.points(2).y)
    expect(4.0)(pen.state.x)
  }
  testPlot("PlotOfTwoArgs") { plot =>
    val pen = plot.createPlotPen("test", true)
    pen.state = pen.state.copy(color = java.awt.Color.GREEN.getRGB)
    expect(0.0)(pen.state.x)
    pen.plot(1.5, 2.5)
    expect(1.5)(pen.state.x)
    pen.state = pen.state.copy(
      isDown = false,
      color = java.awt.Color.RED.getRGB)
    pen.plot(3.5, 4.5)
    expect(3.5)(pen.state.x)
    expect(2)(pen.points.size)
    expect(1.5)(pen.points(0).x)
    expect(3.5)(pen.points(1).x)
    expect(2.5)(pen.points(0).y)
    expect(4.5)(pen.points(1).y)
    assert(pen.points(0).isDown)
    assert(!pen.points(1).isDown)
    expect(java.awt.Color.GREEN.getRGB)(pen.points(0).color)
    expect(java.awt.Color.RED.getRGB)(pen.points(1).color)
  }
}
